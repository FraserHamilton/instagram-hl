{"version":3,"sources":["Components/Button.js","Components/GameOver.js","Components/StartScreen.js","Components/ButtonGroup.js","Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["StyledButton","styled","onClick","text","name","className","StyledGameOver","score","restartFunc","highScore","localStorage","getItem","setItem","setNewHighScore","getHighScore","StyledStartScreen","startFunc","href","ButtonGroup","clickFunction","StyledGame","instagramData","instaData","slice","getNewInsta","newInsta","Math","floor","random","length","followers","toFixed","useState","givenInsta","setGivenInsta","hiddenInsta","setHiddenInsta","gameStage","setGameStage","setScore","startNewGame","alt","height","src","picture","id","Fragment","end","e","guess","target","isCorrect","setTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b25afb57.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Button = ({ onClick, text, name, className }) => {\r\n  return (\r\n    <button className={className} onClick={onClick} name={name}>\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst StyledButton = styled(Button)`\r\n  background-color: Transparent;\r\n  border-radius: 999px;\r\n  outline: none;\r\n  width: 200px;\r\n  height: 50px;\r\n  border: white 3px solid;\r\n  font-weight: bold;\r\n  margin: 0 auto;\r\n  margin-top: 10px;\r\n  display: block;\r\n  color: #fff989;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    background-color: white;\r\n    color: black;\r\n  }\r\n`;\r\n\r\nexport default StyledButton;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"./Button.js\";\r\n\r\nconst GameOver = ({ score, restartFunc, className }) => {\r\n  const setNewHighScore = highScore => {\r\n    localStorage.setItem(\"highScore\", highScore);\r\n  };\r\n\r\n  const getHighScore = () => {\r\n    var highScore = localStorage.getItem(\"highScore\");\r\n\r\n    if (score > highScore || highScore === \"undefined\") {\r\n      setNewHighScore(score);\r\n\r\n      return score;\r\n    }\r\n\r\n    return highScore;\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div>\r\n        <h1>Game Over</h1>\r\n        <h3>Your Score This Time Was: {score}</h3>\r\n        <h3>High Score: {getHighScore()}</h3>\r\n        <Button text={\"Play Again\"} onClick={restartFunc}></Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst StyledGameOver = styled(GameOver)`\r\n  h1 {\r\n    color: #fff989;\r\n    font-size: 3em;\r\n  }\r\n  button {\r\n    margin-top: 50px;\r\n  }\r\n`;\r\n\r\nexport default StyledGameOver;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"./Button.js\";\n\nconst StartScreen = ({ startFunc, className }) => {\n  return (\n    <div className={className}>\n      <div>\n        <h1>Higher Or Lower</h1>\n        <h2>Instagram Edition</h2>\n        <h3>\n          A frustratingly addictive game of higher or lower using the top\n          Instagram follower counts. <br></br> The data is pulled daily to keep\n          the counts as current as possible. <br></br>\n        </h3>\n\n        <Button text={\"Play\"} onClick={startFunc}></Button>\n        <a href=\"http://www.higherlowergame.com/\">\n          Check out the original game that inspired this version\n        </a>\n      </div>\n    </div>\n  );\n};\n\nconst StyledStartScreen = styled(StartScreen)`\n  h1 {\n    color: #fff989;\n    font-size: 3em;\n    margin-bottom: 0;\n  }\n\n  h2 {\n    margin-top: 0;\n  }\n\n  button {\n    margin-top: 50px;\n    margin-bottom: 50px;\n  }\n\n  a {\n    color: #fff989;\n  }\n\n  a: hover {\n    color: #ffffff;\n  }\n`;\n\nexport default StyledStartScreen;\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nconst ButtonGroup = ({ clickFunction, className }) => {\r\n  return (\r\n    <div className={className}>\r\n      <Button onClick={clickFunction} name={\"higher\"} text={\"Higher\"}></Button>\r\n      <Button onClick={clickFunction} name={\"lower\"} text={\"Lower\"}></Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonGroup;\r\n","import React, { useState } from \"react\";\r\nimport instaData from \"../Data/instaDataFinal.json\";\r\nimport GameOver from \"./GameOver\";\r\nimport StartScreen from \"./StartScreen\";\r\nimport CountUp from \"react-countup\";\r\nimport ButtonGroup from \"./ButtonGroup\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Game = ({ className }) => {\r\n  const convertToRoundedMillions = number => {\r\n    let rounded = (number * 0.000001).toFixed(2);\r\n    return rounded;\r\n  };\r\n\r\n  const instagramData = instaData.slice(0, 249);\r\n\r\n  const getNewInsta = () => {\r\n    const newInsta = {\r\n      ...instagramData[Math.floor(Math.random() * instagramData.length)]\r\n    };\r\n    newInsta.followers = convertToRoundedMillions(newInsta.followers);\r\n    return newInsta;\r\n  };\r\n\r\n  const [givenInsta, setGivenInsta] = useState(getNewInsta());\r\n\r\n  const [hiddenInsta, setHiddenInsta] = useState(getNewInsta());\r\n\r\n  const [gameStage, setGameStage] = useState(1);\r\n\r\n  const [score, setScore] = useState(0);\r\n\r\n  const calculateAnswer = () => {\r\n    if (hiddenInsta.followers === givenInsta.followers) {\r\n      return \"same\";\r\n    } else if (hiddenInsta.followers > givenInsta.followers) {\r\n      return \"higher\";\r\n    } else {\r\n      return \"lower\";\r\n    }\r\n  };\r\n\r\n  const startNewRound = () => {\r\n    setGivenInsta(hiddenInsta);\r\n    setHiddenInsta(getNewInsta());\r\n    setGameStage(2);\r\n  };\r\n\r\n  const startNewGame = () => {\r\n    setGivenInsta(getNewInsta());\r\n    setHiddenInsta(getNewInsta());\r\n    setScore(0);\r\n    setGameStage(2);\r\n  };\r\n\r\n  const gameOver = () => {\r\n    setGameStage(4);\r\n  };\r\n\r\n  const guessClick = e => {\r\n    const guess = e.target.name;\r\n\r\n    const highOrLow = calculateAnswer();\r\n\r\n    const isCorrect = highOrLow === guess;\r\n\r\n    setGameStage(3);\r\n\r\n    setTimeout(() => {\r\n      if (isCorrect) {\r\n        setScore(score + 1);\r\n        startNewRound();\r\n      } else {\r\n        gameOver();\r\n      }\r\n    }, 3000);\r\n  };\r\n\r\n  if (gameStage === 1) {\r\n    return <StartScreen startFunc={startNewGame}></StartScreen>;\r\n  } else if (gameStage === 2 || gameStage === 3) {\r\n    return (\r\n      <div className={className}>\r\n        <h1>Score: {score}</h1>\r\n        <div className={\"instaDisplay\"}>\r\n          <img\r\n            alt={givenInsta.name}\r\n            height=\"200px\"\r\n            src={givenInsta.picture}\r\n          ></img>\r\n          <h2>{givenInsta.name}</h2>\r\n          <p>Has</p>\r\n          <h1>{givenInsta.followers}M</h1>\r\n          <p>Followers</p>\r\n        </div>\r\n        <div id=\"versus\">\r\n          <h1>VS</h1>\r\n        </div>\r\n        <div className={\"instaDisplay\"}>\r\n          <img\r\n            alt={hiddenInsta.name}\r\n            height=\"200px\"\r\n            src={hiddenInsta.picture}\r\n          ></img>\r\n          <h2>{hiddenInsta.name}</h2>\r\n          <p>Has</p>\r\n          {gameStage === 3 ? (\r\n            <React.Fragment>\r\n              <h1>\r\n                <CountUp end={hiddenInsta.followers} />M\r\n              </h1>\r\n              <p>Followers Than {givenInsta.name}</p>\r\n            </React.Fragment>\r\n          ) : (\r\n            <React.Fragment>\r\n              <ButtonGroup clickFunction={guessClick}></ButtonGroup>\r\n              <p>Followers Than {givenInsta.name}</p>\r\n            </React.Fragment>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <GameOver score={score} restartFunc={startNewGame}></GameOver>;\r\n  }\r\n};\r\n\r\nconst StyledGame = styled(Game)`\r\n  #versus {\r\n    display: inline-block;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    color: #fff989;\r\n  }\r\n  .instaDisplay {\r\n    display: inline-block;\r\n    width: 500px;\r\n    min-height: 500px;\r\n    h1 {\r\n      color: #fff989;\r\n      min-height: 110px;\r\n      line-height: 110px;\r\n      white-space: nowrap;\r\n      font-size: 3em;\r\n      margin: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default StyledGame;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Game from \"./Components/Game.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}